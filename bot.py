import asyncio
import logging
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8196226068:AAFfDnp_V3B2E_wGXZVWPbj7grLDwursigc"
DB_URL = "postgresql://postgres:UCVsjmKonvErYVabRPtVOOVvbQHQbAAj@postgres.railway.internal:5432/railway"
db_pool = None

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
class AddProduct(StatesGroup):
    name = State()
    category = State()
    price = State()
    contact = State()
    photo = State()  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

class SearchState(StatesGroup):
    by_name = State()

class EditProduct(StatesGroup):
    choosing_field = State()
    waiting_for_input = State()

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DB_URL)

async def get_db():
    return db_pool

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏")],
        [KeyboardButton(text="üìú –í—Å–µ —Ç–æ–≤–∞—Ä—ã"), KeyboardButton(text="üßæ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
    ],
    resize_keyboard=True
)

@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
@dp.message(F.text == "‚ûï –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_add_product(message: types.Message, state: FSMContext):
    await state.set_state(AddProduct.name)
    await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* —Ç–æ–≤–∞—Ä–∞:", parse_mode="Markdown")

@dp.message(AddProduct.name)
async def step_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    pool = await get_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT DISTINCT category FROM products ORDER BY category")
    if not rows:
        return await message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –±–∞–∑—É.")
    buttons = [[InlineKeyboardButton(text=row["category"].capitalize(), callback_data=f"cat_{row['category']}")]
               for row in rows]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    buttons.append([InlineKeyboardButton(text="üÜï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", callback_data="add_new_category")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await state.set_state(AddProduct.category)
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def step_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.replace("cat_", "")
    await state.update_data(category=category)
    await callback.message.edit_reply_markup()
    await state.set_state(AddProduct.price)
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ *—Ü–µ–Ω—É* —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="Markdown")

@dp.callback_query(F.data == "add_new_category")
async def add_new_category(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddProduct.category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@dp.message(AddProduct.category)
async def new_category_input(message: types.Message, state: FSMContext):
    new_category = message.text.strip().lower()
    await state.update_data(category=new_category)
    await state.set_state(AddProduct.price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ *—Ü–µ–Ω—É* —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="Markdown")

@dp.message(AddProduct.price)
async def step_price(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.")
    await state.update_data(price=message.text.strip())
    await state.set_state(AddProduct.contact)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message(AddProduct.contact)
async def step_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text.strip())
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await state.set_state(AddProduct.photo)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:")

@dp.message(AddProduct.photo, F.photo)
async def step_photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo=photo_file_id)
    data = await state.get_data()
    user_id = message.from_user.id
    pool = await get_db()
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO products (user_id, name, category, price, contacts, photo)
            VALUES ($1, $2, $3, $4, $5, $6)
            """,
            user_id, data["name"], data["category"], data["price"], data["contact"], data["photo"]
        )
    contact_btn = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{data['contact'].strip().lstrip('@')}")]]
    )
    product_message = (
        f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        f"*{data['name']}* ‚Äî {data['price']} ‚ÇΩ\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category'].capitalize()}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ —á–∞—Ç–µ –±–æ—Ç–∞)
    await message.answer_photo(
        photo=data["photo"],
        caption=product_message,
        parse_mode="Markdown",
        reply_markup=contact_btn
    )
    await state.clear()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π ---
@dp.message(F.text == "üìú –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
async def all_items(message: types.Message):
    pool = await get_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT name, price, contacts, photo FROM products ORDER BY created_at DESC LIMIT 5")
    if not rows:
        return await message.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    for row in rows:
        caption = f"{row['name']} ‚Äì {row['price']} ‚ÇΩ\n–ö–æ–Ω—Ç–∞–∫—Ç: {row['contacts']}"
        await message.answer_photo(photo=row['photo'], caption=caption)

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏")
async def find_menu(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text="üî§ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_name")],
        [InlineKeyboardButton(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_category")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä?", reply_markup=markup)

@dp.callback_query(F.data == "search_name")
async def search_by_name_prompt(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SearchState.by_name)
    await callback.message.answer("üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(SearchState.by_name)
async def search_by_name_result(message: types.Message, state: FSMContext):
    keyword = message.text.strip().lower()
    pool = await get_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT name, price, contacts, photo FROM products WHERE LOWER(name) LIKE $1 ORDER BY created_at DESC LIMIT 5",
            f"%{keyword}%"
        )
    await state.clear()
    if not rows:
        return await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    for row in rows:
        caption = f"{row['name']} ‚Äì {row['price']} ‚ÇΩ\n–ö–æ–Ω—Ç–∞–∫—Ç: {row['contacts']}"
        await message.answer_photo(photo=row['photo'], caption=caption)

@dp.callback_query(F.data == "search_category")
async def search_by_category(callback: types.CallbackQuery):
    pool = await get_db()
    async with pool.acquire() as conn:
        categories = await conn.fetch("SELECT DISTINCT category FROM products ORDER BY category")
    if not categories:
        return await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    buttons = [
        [InlineKeyboardButton(text=cat['category'].capitalize(), callback_data=f"search_cat_{cat['category']}")]
        for cat in categories
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("search_cat_"))
async def search_category_result(callback: types.CallbackQuery):
    category = callback.data.replace("search_cat_", "")
    pool = await get_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT name, price, contacts, photo FROM products WHERE category = $1 ORDER BY created_at DESC LIMIT 5",
            category
        )
    if not rows:
        return await callback.message.answer(f"‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
    for row in rows:
        caption = f"{row['name']} ‚Äì {row['price']} ‚ÇΩ\n–ö–æ–Ω—Ç–∞–∫—Ç: {row['contacts']}"
        await callback.message.answer_photo(photo=row['photo'], caption=caption)

@dp.message(F.text == "üßæ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_products(message: types.Message):
    user_id = message.from_user.id
    pool = await get_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT id, name, price FROM products WHERE user_id = $1 ORDER BY created_at DESC", user_id)
    if not rows:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    result = "üßæ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
    for row in rows:
        result += f"üÜî {row['id']}: {row['name']} ‚Äì {row['price']} ‚ÇΩ\n"
        result += f"‚úèÔ∏è /edit_{row['id']}    ‚ùå /delete_{row['id']}\n\n"
    await message.answer(result)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
@dp.message(F.text.startswith("/edit_"))
async def edit_product(message: types.Message, state: FSMContext):
    try:
        product_id = int(message.text.split("_")[1])
    except (IndexError, ValueError):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    pool = await get_db()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
    if not row:
        return await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    if row['user_id'] != message.from_user.id:
        return await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    await state.update_data(product_id=product_id)
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")],
        [InlineKeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_field_contact")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="edit_finish")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await state.set_state(EditProduct.choosing_field)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("edit_field_") and c.data != "edit_field_category")
async def edit_field_handler(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.replace("edit_field_", "")
    await state.update_data(field=field)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
    await state.set_state(EditProduct.waiting_for_input)

@dp.callback_query(F.data == "edit_field_category")
async def edit_field_category(callback: types.CallbackQuery, state: FSMContext):
    pool = await get_db()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT DISTINCT category FROM products ORDER BY category")
    if not rows:
        return await callback.message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ.")
    buttons = [[InlineKeyboardButton(text=row["category"].capitalize(), callback_data=f"edit_cat_{row['category']}")]
               for row in rows]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("edit_cat_"))
async def edit_category_selection(callback: types.CallbackQuery, state: FSMContext):
    new_category = callback.data.replace("edit_cat_", "")
    data = await state.get_data()
    product_id = data.get("product_id")
    pool = await get_db()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE products SET category = $1 WHERE id = $2", new_category, product_id)
    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_category.capitalize()}.")
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")],
        [InlineKeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_field_contact")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="edit_finish")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)
    await state.set_state(EditProduct.choosing_field)

@dp.message(EditProduct.waiting_for_input)
async def process_edit_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field = data.get("field")
    product_id = data.get("product_id")
    new_value = message.text.strip()
    if field == "price" and not new_value.isdigit():
        return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    pool = await get_db()
    query = f"UPDATE products SET {field} = $1 WHERE id = $2"
    async with pool.acquire() as conn:
        await conn.execute(query, new_value, product_id)
    await message.answer(f"{field.capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")],
        [InlineKeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_field_contact")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="edit_finish")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)
    await state.set_state(EditProduct.choosing_field)

@dp.callback_query(F.data == "edit_finish")
async def finish_edit(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
@dp.message(F.text.startswith("/delete_"))
async def delete_product(message: types.Message, state: FSMContext):
    try:
        product_id = int(message.text.split("_")[1])
    except (IndexError, ValueError):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    pool = await get_db()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
    if not row:
        return await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    if row['user_id'] != message.from_user.id:
        return await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_confirm_{product_id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"delete_cancel_{product_id}")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("delete_confirm_"))
async def confirm_delete(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[-1])
    except (IndexError, ValueError):
        return await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    pool = await get_db()
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM products WHERE id = $1", product_id)
    await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

@dp.callback_query(lambda c: c.data.startswith("delete_cancel_"))
async def cancel_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
